<sect1 id="using-pathnames"><title>Mapping path names</title>

<sect2><title>Win32 and POSIX paths</title>

<para>Cygwin supports both Win32- and POSIX-style paths, using either
forward or back slashes as the directory delimiter.  UNC pathnames (starting
with two slashes and a network name) are also supported.</para>

<para>In POSIX operating systems (such as Linux) there is no concept of
"drives" nor drive letters.  All absolute paths begin with a slash instead
of "c:" and all file systems appear as subdirectories (for example, you
might buy a new disk and make it be the <filename>/disk2</filename>
directory).  This practice is simulated by Cygwin to assist in porting POSIX
programs to Windows.</para>

<para>The <command>mount</command> program is used to map drives and shares
onto the POSIX directory tree, much like as is done by the POSIX
<command>mount</command> utility.  This is very similar to the old DOS
<command>join</command>, in that it makes your drive letters appear as
subdirectories somewhere else.  By default the POSIX root
<filename>/</filename> points to the system partition but it can be
relocated to any directory in the Windows file system.
</para>

<para>The mapping between Win32 pathnames and POSIX styles appears in the
<FirstTerm>mount table</FirstTerm>. Cygwin maps between Win32 and POSIX
paths by finding the longest matching prefix in the mount table.  This table
is stored in in the Windows registry and can be accessed under
"HKEY_CURRENT_USER/Software/Cygnus Solutions/CYGWIN.DLL
setup/&lt;version&gt;/mounts" where &lt;version&gt; is the latest registry
version associated with the Cygwin library (this version is not the same
as the release number).</para>

<para>The mount table is displayed with <command>mount</command> and it is
modified by <command>mount [-switch] Win32path POSIXpath</command>.  The
optional switches <literal>-b</literal> and <literal>-t</literal> specify a
default file mode, a concept detailed in
<Xref LinkEnd="using-textbinary">.</para>

<para>The following example demonstrates using the mount utility to
mount the directory 
<filename>C:\cygnus\cygwin-b20\H-i586-cygwin32\bin</filename>
to <filename>/bin</filename> and the network directory 
<filename>\\pollux\home\joe\data</filename> to <filename>/data</filename>.
<filename>/bin</filename> is assumed to already exist.
exist
</para>
<example>
<title>Adding mount points</title>
<screen>
<prompt>c:\cygnus\&gt;</prompt> <userinput>ls /bin /data</userinput>
ls: /data: No such file or directory
<prompt>c:\cygnus\&gt;</prompt> <userinput>mount C:\cygnus\cygwin-b20\H-i586-cygwin32\bin /bin</userinput>
<prompt>c:\cygnus\&gt;</prompt> <userinput>mount \\pollux\home\joe\data /data</userinput>
Warning: /data does not exist!
<prompt>c:\cygnus\&gt;</prompt> <userinput>mount</userinput>
Device           Directory           Type        Flags
\\pollux\home\joe\data   /data       native      text!=binary 
C:\cygnus\cygwin-b20\H-i586-cygwin32\bin   /bin   native   text!=binary
D:               /d                  native      text!=binary
\\.\tape1:       /dev/st1            native      text!=binary
\\.\tape0:       /dev/st0            native      text!=binary
\\.\b:           /dev/fd1            native      text!=binary
\\.\a:           /dev/fd0            native      text!=binary
C:               /                   native      text!=binary
<prompt>c:\cygnus\&gt;</prompt> <userinput>ls /bin/sh</userinput>
/bin/sh
</screen>
</example>

<para>The previous example was shown in the DOS shell.
In bash it is legal and convenient to use the forward "/" in the Win32 pathname
as the "\" is the shell escape. </para>

<para>The <command>cygpath</command> program can be used to translate
between Win32 and POSIX pathnames in shell scripts. See
<Xref Linkend="using-utils"> for details.</para>

<para>The <EnVar>HOME</EnVar>, <EnVar>PATH</EnVar>, and
<EnVar>LD_LIBRARY_PATH</EnVar> environment variables are automatically
converted from Win32 format to POSIX format (e.g. from
<filename>C:\cygnus\cygwin-b20\H-i586-cygwin32\bin</filename> to
<filename>/bin</filename>) when a Cygwin process first starts.</para>

<para>Symbolic links can also be used to map Win32 pathnames to POSIX.  For
example the command <command>ln -s //pollux/home/joe/data /data</command>
would have about the same effect as the <command>mount</command> in
the example above, except that symbolic links do not set a default file mode.
Other differences are that the mapping is distributed
troughout the file system and proceeds by iteratively walking the directory
tree instead of matching the longest prefix in a kernel table.
Note that symbolic links work on network drives only if they support
the "system" file attribute.</para>
</sect2>

<sect2><title>Mount point types</title>

<para>Usually the POSIX mount point is an existing empty
directory, as in standard UNIX. If this is the case, or if there is a
place-holder for the mount point, such as a file, a symbolic link (pointing
to anywhere) or a non-empty directory, you get the expected behavior. Files
present in a mount point directory before the mount become invisible to
Cygwin programs.
</para>

<para> It is sometimes desirable to mount to a non-existent directory,
for example to avoid cluttering the root directory with names
such as
<filename>a</filename>, <filename>b</filename>, <filename>c</filename>
pointing to disks. 
Although you will get a warning, most everything will work properly
when you refer to the mount point explicitly.
Some strange effects can occur however.
For example if your current working directory is <filename>/dir</filename>,
say, and <filename>/dir/mtpt</filename> is a mount point, then
<filename>mtpt</filename> will not show up in an <command>ls</command> or
<command>echo *</command> command and <command>find .</command> will not
find <filename>mtpt</filename>.
</para>

<para>Although you can mount to pathnames that do not start with "/",
there is no way to make use of such mount points.</para>

</sect2>

<sect2><title>Where to mount</title>
<para>Which set of mounts is right for a given Cygwin user depends
largely on how closely you want to simulate a POSIX environment,
whether you mix Windows and Cygwin programs, and how many drive
letters you are using.  If you want to be very POSIX-like, you may
want to do something like this:

<example><title>POSIX-like mount setup</title>
<screen>
<prompt>C:\&gt;</prompt> <userinput>mount c:\Cygnus\98r2 /</userinput>
<prompt>C:\&gt;</prompt> <userinput>mount c:\ /c</userinput>
<prompt>C:\&gt;</prompt> <userinput>mount d:\ /d</userinput>
<prompt>C:\&gt;</prompt> <userinput>mount e:\ /cdrom</userinput>
</screen>
</example>

<para>However, if you mix Windows and Cygwin programs a lot, you might
want to create an "identity" mapping, so that conversions between the
two (see the cygpath command) can be eliminated:</para>

<example><title>Identity mount setup</title>
<screen>
<prompt>C:\&gt;</prompt> <userinput>mount c:\ \</userinput>
<prompt>C:\&gt;</prompt> <userinput>mount d:\foo /foo</userinput>
<prompt>C:\&gt;</prompt> <userinput>mount d:\bar /bar</userinput>
<prompt>C:\&gt;</prompt> <userinput>mount e:\grill /grill</userinput>
</screen>
</example>

<para>You'd have to repeat this for all top-level subdirectories on
all drives, but then you'd always have the top-level directories
available as the same names in both systems.</para>

</sect2>

</sect1>

<sect1 id="using-specialnames"><title>Special filenames</title>

<sect2> <title>DOS devices</title>

<para>Windows filenames invalid under Windows are also invalid under
Cygwin.  This means that base filenames such as 
<filename>AUX</filename>, <filename>COM1</filename>,
<filename>LPT1</filename> or <filename>PRN</filename> (to name a few)
cannot be used in a regular Cygwin Windows or POSIX path, even with an
extension (<filename>prn.txt</filename>). However the special names can be
used as filename extensions (<filename>file.aux</filename>). You can use
the special names as you would under DOS, for example you can print on your
default printer with the command <command>cat filename > PRN</command>
(make sure to end with a Form Feed).
</para>

<sect2> <Title>POSIX devices</title>
<para>There is no need to create a POSIX <filename>/dev</filename> 
directory as it is simulated within Cygwin automatically.
It supports the following devices: <filename>/dev/null</filename>,
<filename>/dev/tty</filename> and
<filename>/dev/comX</filename> (the serial ports).
These devices cannot be seen with the command <command>ls /dev</command>
although commands such as <command>ls /dev/tty</command> work fine.
<comment>
FIXME: Are there other devices under /dev. What about the funny ones
mounted by default, such as /dev/fd1. What do they really do?
</comment>
</para>

<sect2><title>The .exe extension</title>

<para> Executable program filenames end with .exe but the .exe need not be
included in the command, so that traditional UNIX names can be used.
To the contrary the extensions ".bat" and ".com" cannot be omitted.</para>

<para>As a side effect, the <command> ls filename</command> gives
information about <filename>filename.exe</filename> if
<filename>filename.exe</filename> exists and <filename>filename</filename>
does not.  In the same situation the function call
<function>stat("filename",..)</function> gives information about
<filename>filename.exe</filename>.  The two files can be distinguished
by examining their inodes, as demonstrated below. </para>
<screen>
<prompt>C:\Cygnus\&gt;</prompt> <userinput>ls * </userinput>
a      a.exe     b.exe
<prompt>C:\Cygnus\&gt;</prompt> <userinput>ls -i a a.exe</userinput>
445885548 a       435996602 a.exe
<prompt>C:\Cygnus\&gt;</prompt> <userinput>ls -i b b.exe</userinput>
432961010 b       432961010 b.exe
</screen>

<para>The <command>gcc</command> compiler produces an executable named
<filename>filename.exe</filename> when asked to produce
<filename>filename</filename>. This allows many makefiles written
for UNIX systems to work well under Cygwin.</para>

<para>Unfortunately the <command>install</command> and
<command>strip</command> commands do distinguish between
<filename>filename</filename> and <filename>filename.exe</filename>. They
fail when working on a non-existing <filename>filename</filename> even if
<filename>filename.exe</filename> exists, thus breaking some makefiles.
This problem can be solved by writing <command>install</command> and
<command>strip</command> shell scripts to provide the extension ".exe"
when needed.
</para>
</sect2>

<sect2><title>The @pathnames</title> 
<para>To circumvent the limitations on shell line length in the native
Windows command shells, Cygwin programs expand their arguments
starting with "@" in a special way.  If a file
<filename>pathname</filename> exists, the argument
<filename>@pathname</filename> expands recursively to the content of
<filename>pathname</filename>. Double quotes can be used inside the
file to delimit strings containing blank space. In the following
example compare the behaviors of the bash built-in
<command>echo</command> and of the program <command>/bin/echo</command>.

<example><title> Using @pathname</title>
<screen>
<prompt>/Cygnus$</prompt> <userinput>echo  'This     is "a     long" line' > mylist</userinput>
<prompt>/Cygnus$</prompt> <userinput>echo @mylist</userinput>
@mylist
<prompt>/Cygnus$</prompt> <userinput>/bin/echo @mylist</userinput>
This is a     long line
<prompt>/Cygnus$</prompt> <userinput>rm mylist</userinput>
<prompt>/Cygnus$</prompt> <userinput>/bin/echo @mylist</userinput>
@mylist
</screen>
</example>
</sect2> 
</sect1>

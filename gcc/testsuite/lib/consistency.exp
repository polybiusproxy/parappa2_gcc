# Copyright (C) 1998,1999 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# Please email any bugs, comments, and/or additions to this file to:
# bug-gcc@prep.ai.mit.edu

# This file was written for by Valdimir N. Makarov
# (vmakarov@cygnus.com) on the base of gcc.exp.

# This file is loaded by the tool init file (eg: unix.exp).  It
# provides default definitions for consistency_start, etc. and other
# supporting cast members.

# These globals are used by consistency_start if no compiler arguments
# are provided.  They are also used by the various testsuites to
# define the environment: where to find stdio.h, libc.a, etc.

# we want to use libgloss so we can get find_gcc.
load_lib libgloss.exp

#
# GCC_UNDER_TEST is the compiler under test.
#

#
# consistency_init -- called at the start of each .exp script.
#
# There currently isn't much to do, but always using it allows us to
# make some enhancements without having to go back and rewrite the scripts.
#

set consistency_initialized 0

proc consistency_init { args } {
    global tmpdir
    global libdir
    global gluefile
    global consistency_initialized
    global GCC_UNDER_TEST
    global TOOL_EXECUTABLE

    if { $consistency_initialized == 1 } { return; }

    if ![info exists GCC_UNDER_TEST] {
	if [info exists TOOL_EXECUTABLE] {
	    set GCC_UNDER_TEST $TOOL_EXECUTABLE;
	} else {
	    set GCC_UNDER_TEST "[find_gcc]"
	}
    }

    if ![info exists tmpdir] then {
	set tmpdir /tmp
    }

    if { [target_info needs_status_wrapper]!="" && ![info exists gluefile] } {
	if [target_info exists uses_underscores] {
	    set flags "additional_flags=-DUNDERSCORES"
	} else {
	    set flags ""
	}
	if [target_info exists wrap_compile_flags] {
	    lappend flags "additional_flags=[target_info wrap_compile_flags]";
	}
	if { [target_compile ${libdir}/testglue.c ${tmpdir}/testglue.o object $flags] == "" } {
	    set gluefile [remote_download host ${tmpdir}/testglue.o testglue.o];
	}
    }
}

proc gcc_target_compile { source dest type options } {
    global tmpdir;
    global gluefile wrap_flags;
    global GCC_UNDER_TEST
    global TOOL_OPTIONS

    if { [target_info needs_status_wrapper]!="" && [info exists gluefile] } {
	lappend options "libs=${gluefile}"
	lappend options "ldflags=$wrap_flags"
    }

    if [target_info exists gcc,stack_size] {
	lappend options "additional_flags=-DSTACK_SIZE=[target_info gcc,stack_size]"
    }
    if [target_info exists gcc,no_trampolines] {
	lappend options "additional_flags=-DNO_TRAMPOLINES"
    }
    if [target_info exists gcc,no_label_values] {
	lappend options "additional_flags=-DNO_LABEL_VALUES"
    }
    if [info exists TOOL_OPTIONS] {
	lappend options "additional_flags=$TOOL_OPTIONS"
    }
    if [target_info exists gcc,no_varargs] {
	lappend options "additional_flags=-DNO_VARARGS"
    }
    if [target_info exists gcc,timeout] {
	lappend options "timeout=[target_info gcc,timeout]"
    }
    lappend options "compiler=$GCC_UNDER_TEST"
    return [target_compile $source $dest $type $options]
}

#
# consistency_finish -- called at the end of every .exp script that calls
# consistency_init
#
# The purpose of this proc is to hide all quirks of the testing
# environment from the testsuites.  It also exists to undo anything
# that consistency_init did (that needs undoing).  #

proc consistency_finish { } {
    # The testing harness apparently requires this.
    global errorInfo;

    if [info exists errorInfo] then {
	unset errorInfo
    }

    # Might as well reset these (keeps our caller from wondering whether
    # s/he has to or not).
    global prms_id bug_id
    set prms_id 0
    set bug_id 0
}

proc consistency_exit { } {
    global gluefile;

    if [info exists gluefile] {
	file_on_build delete $gluefile;
	unset gluefile;
    }
}
    
# If this is an older version of dejagnu (without runtest_file_p),
# provide one and assume the old syntax: foo1.exp bar1.c foo2.exp bar2.c.
# This can be deleted after next dejagnu release.

if { [info procs runtest_file_p] == "" } then {
    proc runtest_file_p { runtests testcase } {
	if { $runtests != "" && [regexp "\[.\]\[cC\]" $runtests] } then {
	    if { [lsearch $runtests [file tail $testcase]] >= 0 } then {
		return 1
	    } else {
		return 0
	    }
	}
	return 1
    }
}

# Provide a definition of this if missing (delete after next dejagnu release).

if { [info procs prune_warnings] == "" } then {
    proc prune_warnings { text } {
	return $text
    }
}
